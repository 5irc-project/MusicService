// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicService.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicService.Migrations
{
    [DbContext(typeof(MusicServiceDBContext))]
    [Migration("20230117123022_SetDb")]
    partial class SetDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MusicService.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MusicService.Models.Kind", b =>
                {
                    b.Property<int>("KindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KindId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("KindId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Kinds");
                });

            modelBuilder.Entity("MusicService.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlaylistId"));

                    b.Property<int>("KindId")
                        .HasColumnType("integer");

                    b.Property<string>("PlaylistName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PlaylistId");

                    b.HasIndex("KindId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MusicService.Models.PlaylistTrack", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer");

                    b.HasKey("PlaylistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("PlaylistTracks");
                });

            modelBuilder.Entity("MusicService.Models.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrackId"));

                    b.Property<float?>("Acousticness")
                        .HasColumnType("real");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text");

                    b.Property<float?>("Danceability")
                        .HasColumnType("real");

                    b.Property<float?>("DurationMs")
                        .HasColumnType("real");

                    b.Property<float?>("Energy")
                        .HasColumnType("real");

                    b.Property<float?>("Instrumentalness")
                        .HasColumnType("real");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<float?>("Liveness")
                        .HasColumnType("real");

                    b.Property<float?>("Loudness")
                        .HasColumnType("real");

                    b.Property<float?>("Popularity")
                        .HasColumnType("real");

                    b.Property<float?>("Speechiness")
                        .HasColumnType("real");

                    b.Property<float?>("Tempo")
                        .HasColumnType("real");

                    b.Property<string>("TrackName")
                        .HasColumnType("text");

                    b.Property<float?>("Valence")
                        .HasColumnType("real");

                    b.HasKey("TrackId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("MusicService.Models.TrackGenre", b =>
                {
                    b.Property<int>("TrackId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("TrackId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TrackGenres");
                });

            modelBuilder.Entity("MusicService.Models.Playlist", b =>
                {
                    b.HasOne("MusicService.Models.Kind", "Kind")
                        .WithMany("Playlists")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("MusicService.Models.PlaylistTrack", b =>
                {
                    b.HasOne("MusicService.Models.Playlist", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicService.Models.Track", "Track")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("MusicService.Models.TrackGenre", b =>
                {
                    b.HasOne("MusicService.Models.Genre", "Genre")
                        .WithMany("TrackGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicService.Models.Track", "Track")
                        .WithMany("TrackGenres")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("MusicService.Models.Genre", b =>
                {
                    b.Navigation("TrackGenres");
                });

            modelBuilder.Entity("MusicService.Models.Kind", b =>
                {
                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("MusicService.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("MusicService.Models.Track", b =>
                {
                    b.Navigation("PlaylistTracks");

                    b.Navigation("TrackGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
