// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicService.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicService.Migrations
{
    [DbContext(typeof(MusicServiceDBContext))]
    [Migration("20230110140706_CreationMusicServiceDatabase")]
    partial class CreationMusicServiceDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GenreMusic", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("MusicsMusicId")
                        .HasColumnType("integer");

                    b.HasKey("GenresGenreId", "MusicsMusicId");

                    b.HasIndex("MusicsMusicId");

                    b.ToTable("GenreMusic", "public");
                });

            modelBuilder.Entity("MusicPlaylist", b =>
                {
                    b.Property<int>("MusicsMusicId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistsPlaylistId")
                        .HasColumnType("integer");

                    b.HasKey("MusicsMusicId", "PlaylistsPlaylistId");

                    b.HasIndex("PlaylistsPlaylistId");

                    b.ToTable("MusicPlaylist", "public");
                });

            modelBuilder.Entity("MusicService.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("gen_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("gen_name");

                    b.HasKey("GenreId");

                    b.ToTable("t_e_genre_gen", "public");
                });

            modelBuilder.Entity("MusicService.Models.Mood", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mood_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MoodId"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("mood_name");

                    b.HasKey("MoodId");

                    b.ToTable("t_e_mood", "public");
                });

            modelBuilder.Entity("MusicService.Models.Music", b =>
                {
                    b.Property<int>("MusicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mus_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MusicId"));

                    b.Property<float?>("Acousticness")
                        .HasColumnType("real")
                        .HasColumnName("mus_acousticness");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text")
                        .HasColumnName("mus_artist_name");

                    b.Property<float?>("Danceability")
                        .HasColumnType("real")
                        .HasColumnName("mus_danceability");

                    b.Property<float?>("DurationMs")
                        .HasColumnType("real")
                        .HasColumnName("mus_duration_ms");

                    b.Property<float?>("Energy")
                        .HasColumnType("real")
                        .HasColumnName("mus_energy");

                    b.Property<float?>("Instrumentalness")
                        .HasColumnType("real")
                        .HasColumnName("mus_instrumentalness");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("mus_key");

                    b.Property<float?>("Liveness")
                        .HasColumnType("real")
                        .HasColumnName("mus_liveness");

                    b.Property<float?>("Loudness")
                        .HasColumnType("real")
                        .HasColumnName("mus_loudness");

                    b.Property<float?>("Popularity")
                        .HasColumnType("real")
                        .HasColumnName("mus_popularity");

                    b.Property<float?>("Speechiness")
                        .HasColumnType("real")
                        .HasColumnName("mus_speechiness");

                    b.Property<float?>("Tempo")
                        .HasColumnType("real")
                        .HasColumnName("mus_tempo");

                    b.Property<string>("TrackName")
                        .HasColumnType("text")
                        .HasColumnName("mus_track_name");

                    b.Property<float?>("Valence")
                        .HasColumnType("real")
                        .HasColumnName("mus_valence");

                    b.HasKey("MusicId");

                    b.ToTable("t_e_music_mus", "public");
                });

            modelBuilder.Entity("MusicService.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("plst_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlaylistId"));

                    b.Property<int>("MoodId")
                        .HasColumnType("integer")
                        .HasColumnName("mood_id");

                    b.Property<string>("PlaylistName")
                        .HasColumnType("text")
                        .HasColumnName("plst_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("usr_id");

                    b.HasKey("PlaylistId");

                    b.HasIndex("MoodId");

                    b.ToTable("t_e_playlist_plst", "public");
                });

            modelBuilder.Entity("GenreMusic", b =>
                {
                    b.HasOne("MusicService.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicService.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicsMusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlaylist", b =>
                {
                    b.HasOne("MusicService.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicsMusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicService.Models.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsPlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicService.Models.Playlist", b =>
                {
                    b.HasOne("MusicService.Models.Mood", null)
                        .WithMany("Playlists")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicService.Models.Mood", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
